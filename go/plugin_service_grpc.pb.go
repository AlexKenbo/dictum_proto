// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: api/plugin_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	// * Sources
	ListObjectSources(ctx context.Context, in *ListObjectSourcesRequest, opts ...grpc.CallOption) (*ListObjectSourcesResponse, error)
	GetLatestSource(ctx context.Context, in *GetLatestSourceRequest, opts ...grpc.CallOption) (*ObjectSource, error)
	CreateObjectSource(ctx context.Context, in *ObjectSource, opts ...grpc.CallOption) (*ObjectSource, error)
	// * Service
	CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error)
	UpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	// * Service Runs
	CreateServiceRun(ctx context.Context, in *ServiceRun, opts ...grpc.CallOption) (*ServiceRun, error)
	UpdateServiceRun(ctx context.Context, in *ServiceRun, opts ...grpc.CallOption) (*ServiceRun, error)
	GetServiceRun(ctx context.Context, in *GetServiceRunRequest, opts ...grpc.CallOption) (*ServiceRun, error)
	ListServiceRuns(ctx context.Context, in *ListServiceRunsRequest, opts ...grpc.CallOption) (*ListServiceRunsResponse, error)
	RunService(ctx context.Context, in *RunServiceRequest, opts ...grpc.CallOption) (PluginService_RunServiceClient, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) ListObjectSources(ctx context.Context, in *ListObjectSourcesRequest, opts ...grpc.CallOption) (*ListObjectSourcesResponse, error) {
	out := new(ListObjectSourcesResponse)
	err := c.cc.Invoke(ctx, "/PluginService/ListObjectSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetLatestSource(ctx context.Context, in *GetLatestSourceRequest, opts ...grpc.CallOption) (*ObjectSource, error) {
	out := new(ObjectSource)
	err := c.cc.Invoke(ctx, "/PluginService/GetLatestSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) CreateObjectSource(ctx context.Context, in *ObjectSource, opts ...grpc.CallOption) (*ObjectSource, error) {
	out := new(ObjectSource)
	err := c.cc.Invoke(ctx, "/PluginService/CreateObjectSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/PluginService/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/PluginService/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/PluginService/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) UpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/PluginService/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) CreateServiceRun(ctx context.Context, in *ServiceRun, opts ...grpc.CallOption) (*ServiceRun, error) {
	out := new(ServiceRun)
	err := c.cc.Invoke(ctx, "/PluginService/CreateServiceRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) UpdateServiceRun(ctx context.Context, in *ServiceRun, opts ...grpc.CallOption) (*ServiceRun, error) {
	out := new(ServiceRun)
	err := c.cc.Invoke(ctx, "/PluginService/UpdateServiceRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetServiceRun(ctx context.Context, in *GetServiceRunRequest, opts ...grpc.CallOption) (*ServiceRun, error) {
	out := new(ServiceRun)
	err := c.cc.Invoke(ctx, "/PluginService/GetServiceRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ListServiceRuns(ctx context.Context, in *ListServiceRunsRequest, opts ...grpc.CallOption) (*ListServiceRunsResponse, error) {
	out := new(ListServiceRunsResponse)
	err := c.cc.Invoke(ctx, "/PluginService/ListServiceRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) RunService(ctx context.Context, in *RunServiceRequest, opts ...grpc.CallOption) (PluginService_RunServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &PluginService_ServiceDesc.Streams[0], "/PluginService/RunService", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginServiceRunServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PluginService_RunServiceClient interface {
	Recv() (*ServiceRun, error)
	grpc.ClientStream
}

type pluginServiceRunServiceClient struct {
	grpc.ClientStream
}

func (x *pluginServiceRunServiceClient) Recv() (*ServiceRun, error) {
	m := new(ServiceRun)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility
type PluginServiceServer interface {
	// * Sources
	ListObjectSources(context.Context, *ListObjectSourcesRequest) (*ListObjectSourcesResponse, error)
	GetLatestSource(context.Context, *GetLatestSourceRequest) (*ObjectSource, error)
	CreateObjectSource(context.Context, *ObjectSource) (*ObjectSource, error)
	// * Service
	CreateService(context.Context, *Service) (*Service, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	GetService(context.Context, *GetServiceRequest) (*Service, error)
	UpdateService(context.Context, *Service) (*Service, error)
	// * Service Runs
	CreateServiceRun(context.Context, *ServiceRun) (*ServiceRun, error)
	UpdateServiceRun(context.Context, *ServiceRun) (*ServiceRun, error)
	GetServiceRun(context.Context, *GetServiceRunRequest) (*ServiceRun, error)
	ListServiceRuns(context.Context, *ListServiceRunsRequest) (*ListServiceRunsResponse, error)
	RunService(*RunServiceRequest, PluginService_RunServiceServer) error
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) ListObjectSources(context.Context, *ListObjectSourcesRequest) (*ListObjectSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectSources not implemented")
}
func (UnimplementedPluginServiceServer) GetLatestSource(context.Context, *GetLatestSourceRequest) (*ObjectSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSource not implemented")
}
func (UnimplementedPluginServiceServer) CreateObjectSource(context.Context, *ObjectSource) (*ObjectSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectSource not implemented")
}
func (UnimplementedPluginServiceServer) CreateService(context.Context, *Service) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedPluginServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedPluginServiceServer) GetService(context.Context, *GetServiceRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedPluginServiceServer) UpdateService(context.Context, *Service) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedPluginServiceServer) CreateServiceRun(context.Context, *ServiceRun) (*ServiceRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceRun not implemented")
}
func (UnimplementedPluginServiceServer) UpdateServiceRun(context.Context, *ServiceRun) (*ServiceRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceRun not implemented")
}
func (UnimplementedPluginServiceServer) GetServiceRun(context.Context, *GetServiceRunRequest) (*ServiceRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRun not implemented")
}
func (UnimplementedPluginServiceServer) ListServiceRuns(context.Context, *ListServiceRunsRequest) (*ListServiceRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceRuns not implemented")
}
func (UnimplementedPluginServiceServer) RunService(*RunServiceRequest, PluginService_RunServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method RunService not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_ListObjectSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ListObjectSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/ListObjectSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ListObjectSources(ctx, req.(*ListObjectSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetLatestSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetLatestSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/GetLatestSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetLatestSource(ctx, req.(*GetLatestSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_CreateObjectSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).CreateObjectSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/CreateObjectSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).CreateObjectSource(ctx, req.(*ObjectSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).CreateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).UpdateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_CreateServiceRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).CreateServiceRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/CreateServiceRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).CreateServiceRun(ctx, req.(*ServiceRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_UpdateServiceRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).UpdateServiceRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/UpdateServiceRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).UpdateServiceRun(ctx, req.(*ServiceRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetServiceRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetServiceRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/GetServiceRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetServiceRun(ctx, req.(*GetServiceRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ListServiceRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ListServiceRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PluginService/ListServiceRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ListServiceRuns(ctx, req.(*ListServiceRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_RunService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServiceServer).RunService(m, &pluginServiceRunServiceServer{stream})
}

type PluginService_RunServiceServer interface {
	Send(*ServiceRun) error
	grpc.ServerStream
}

type pluginServiceRunServiceServer struct {
	grpc.ServerStream
}

func (x *pluginServiceRunServiceServer) Send(m *ServiceRun) error {
	return x.ServerStream.SendMsg(m)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListObjectSources",
			Handler:    _PluginService_ListObjectSources_Handler,
		},
		{
			MethodName: "GetLatestSource",
			Handler:    _PluginService_GetLatestSource_Handler,
		},
		{
			MethodName: "CreateObjectSource",
			Handler:    _PluginService_CreateObjectSource_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _PluginService_CreateService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _PluginService_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _PluginService_GetService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _PluginService_UpdateService_Handler,
		},
		{
			MethodName: "CreateServiceRun",
			Handler:    _PluginService_CreateServiceRun_Handler,
		},
		{
			MethodName: "UpdateServiceRun",
			Handler:    _PluginService_UpdateServiceRun_Handler,
		},
		{
			MethodName: "GetServiceRun",
			Handler:    _PluginService_GetServiceRun_Handler,
		},
		{
			MethodName: "ListServiceRuns",
			Handler:    _PluginService_ListServiceRuns_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunService",
			Handler:       _PluginService_RunService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/plugin_service.proto",
}
