// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/user_hub.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserHubClient is the client API for UserHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserHubClient interface {
	ListUsers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	GetUser(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	CreateUserProvider(ctx context.Context, in *AuthProvider, opts ...grpc.CallOption) (*AuthProvider, error)
}

type userHubClient struct {
	cc grpc.ClientConnInterface
}

func NewUserHubClient(cc grpc.ClientConnInterface) UserHubClient {
	return &userHubClient{cc}
}

func (c *userHubClient) ListUsers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/UserHub/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHubClient) GetUser(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/UserHub/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHubClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/UserHub/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHubClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/UserHub/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHubClient) CreateUserProvider(ctx context.Context, in *AuthProvider, opts ...grpc.CallOption) (*AuthProvider, error) {
	out := new(AuthProvider)
	err := c.cc.Invoke(ctx, "/UserHub/CreateUserProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserHubServer is the server API for UserHub service.
// All implementations must embed UnimplementedUserHubServer
// for forward compatibility
type UserHubServer interface {
	ListUsers(context.Context, *ListRequest) (*ListUsersResponse, error)
	GetUser(context.Context, *GetRequest) (*User, error)
	CreateUser(context.Context, *User) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	CreateUserProvider(context.Context, *AuthProvider) (*AuthProvider, error)
	mustEmbedUnimplementedUserHubServer()
}

// UnimplementedUserHubServer must be embedded to have forward compatible implementations.
type UnimplementedUserHubServer struct {
}

func (UnimplementedUserHubServer) ListUsers(context.Context, *ListRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserHubServer) GetUser(context.Context, *GetRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserHubServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserHubServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserHubServer) CreateUserProvider(context.Context, *AuthProvider) (*AuthProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserProvider not implemented")
}
func (UnimplementedUserHubServer) mustEmbedUnimplementedUserHubServer() {}

// UnsafeUserHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserHubServer will
// result in compilation errors.
type UnsafeUserHubServer interface {
	mustEmbedUnimplementedUserHubServer()
}

func RegisterUserHubServer(s grpc.ServiceRegistrar, srv UserHubServer) {
	s.RegisterService(&UserHub_ServiceDesc, srv)
}

func _UserHub_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHubServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHub/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHubServer).ListUsers(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHub_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHubServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHub/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHubServer).GetUser(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHub_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHubServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHub/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHubServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHub_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHubServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHub/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHubServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHub_CreateUserProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHubServer).CreateUserProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHub/CreateUserProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHubServer).CreateUserProvider(ctx, req.(*AuthProvider))
	}
	return interceptor(ctx, in, info, handler)
}

// UserHub_ServiceDesc is the grpc.ServiceDesc for UserHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserHub",
	HandlerType: (*UserHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _UserHub_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserHub_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserHub_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserHub_UpdateUser_Handler,
		},
		{
			MethodName: "CreateUserProvider",
			Handler:    _UserHub_CreateUserProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_hub.proto",
}
