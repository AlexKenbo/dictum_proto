// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/fin_event.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FinEvent_ListTransfers_FullMethodName        = "/FinEvent/ListTransfers"
	FinEvent_GetTransfer_FullMethodName          = "/FinEvent/GetTransfer"
	FinEvent_CreateTransfer_FullMethodName       = "/FinEvent/CreateTransfer"
	FinEvent_BatchInsertTransfers_FullMethodName = "/FinEvent/BatchInsertTransfers"
	FinEvent_UpdateTransfer_FullMethodName       = "/FinEvent/UpdateTransfer"
	FinEvent_AggregateTransfers_FullMethodName   = "/FinEvent/AggregateTransfers"
	FinEvent_ListAccruals_FullMethodName         = "/FinEvent/ListAccruals"
	FinEvent_GetAccrual_FullMethodName           = "/FinEvent/GetAccrual"
	FinEvent_CreateAccrual_FullMethodName        = "/FinEvent/CreateAccrual"
	FinEvent_UpdateAccrual_FullMethodName        = "/FinEvent/UpdateAccrual"
	FinEvent_AggregateAccruals_FullMethodName    = "/FinEvent/AggregateAccruals"
	FinEvent_BatchInsertAccruals_FullMethodName  = "/FinEvent/BatchInsertAccruals"
	FinEvent_ListProducts_FullMethodName         = "/FinEvent/ListProducts"
	FinEvent_ListPositions_FullMethodName        = "/FinEvent/ListPositions"
	FinEvent_UpdatePosition_FullMethodName       = "/FinEvent/UpdatePosition"
	FinEvent_BatchInsertPostions_FullMethodName  = "/FinEvent/BatchInsertPostions"
	FinEvent_ListArticles_FullMethodName         = "/FinEvent/ListArticles"
	FinEvent_GetArticle_FullMethodName           = "/FinEvent/GetArticle"
	FinEvent_CreateArticle_FullMethodName        = "/FinEvent/CreateArticle"
	FinEvent_UpdateArticle_FullMethodName        = "/FinEvent/UpdateArticle"
	FinEvent_ListAllocations_FullMethodName      = "/FinEvent/ListAllocations"
	FinEvent_CreateAllocation_FullMethodName     = "/FinEvent/CreateAllocation"
)

// FinEventClient is the client API for FinEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinEventClient interface {
	// --
	ListTransfers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	GetTransfer(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Transfer, error)
	CreateTransfer(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*Transfer, error)
	BatchInsertTransfers(ctx context.Context, in *BatchInsertTransfersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTransfer(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*Transfer, error)
	AggregateTransfers(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*TransfersAggregate, error)
	// --
	ListAccruals(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListAccrualsResponse, error)
	GetAccrual(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Accrual, error)
	CreateAccrual(ctx context.Context, in *Accrual, opts ...grpc.CallOption) (*Accrual, error)
	UpdateAccrual(ctx context.Context, in *Accrual, opts ...grpc.CallOption) (*Accrual, error)
	AggregateAccruals(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AccrualsAggregate, error)
	BatchInsertAccruals(ctx context.Context, in *BatchInsertAccrualsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --
	ListProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	ListPositions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListPositionsResponse, error)
	UpdatePosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*Position, error)
	BatchInsertPostions(ctx context.Context, in *BatchInsertPositionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --
	ListArticles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArticlesResponse, error)
	GetArticle(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Article, error)
	CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	// --
	ListAllocations(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListAllocationsResponse, error)
	CreateAllocation(ctx context.Context, in *Allocation, opts ...grpc.CallOption) (*Allocation, error)
}

type finEventClient struct {
	cc grpc.ClientConnInterface
}

func NewFinEventClient(cc grpc.ClientConnInterface) FinEventClient {
	return &finEventClient{cc}
}

func (c *finEventClient) ListTransfers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, FinEvent_ListTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) GetTransfer(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, FinEvent_GetTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) CreateTransfer(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, FinEvent_CreateTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) BatchInsertTransfers(ctx context.Context, in *BatchInsertTransfersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FinEvent_BatchInsertTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) UpdateTransfer(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, FinEvent_UpdateTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) AggregateTransfers(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*TransfersAggregate, error) {
	out := new(TransfersAggregate)
	err := c.cc.Invoke(ctx, FinEvent_AggregateTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) ListAccruals(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListAccrualsResponse, error) {
	out := new(ListAccrualsResponse)
	err := c.cc.Invoke(ctx, FinEvent_ListAccruals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) GetAccrual(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Accrual, error) {
	out := new(Accrual)
	err := c.cc.Invoke(ctx, FinEvent_GetAccrual_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) CreateAccrual(ctx context.Context, in *Accrual, opts ...grpc.CallOption) (*Accrual, error) {
	out := new(Accrual)
	err := c.cc.Invoke(ctx, FinEvent_CreateAccrual_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) UpdateAccrual(ctx context.Context, in *Accrual, opts ...grpc.CallOption) (*Accrual, error) {
	out := new(Accrual)
	err := c.cc.Invoke(ctx, FinEvent_UpdateAccrual_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) AggregateAccruals(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AccrualsAggregate, error) {
	out := new(AccrualsAggregate)
	err := c.cc.Invoke(ctx, FinEvent_AggregateAccruals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) BatchInsertAccruals(ctx context.Context, in *BatchInsertAccrualsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FinEvent_BatchInsertAccruals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) ListProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, FinEvent_ListProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) ListPositions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListPositionsResponse, error) {
	out := new(ListPositionsResponse)
	err := c.cc.Invoke(ctx, FinEvent_ListPositions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) UpdatePosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, FinEvent_UpdatePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) BatchInsertPostions(ctx context.Context, in *BatchInsertPositionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FinEvent_BatchInsertPostions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) ListArticles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArticlesResponse, error) {
	out := new(ListArticlesResponse)
	err := c.cc.Invoke(ctx, FinEvent_ListArticles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) GetArticle(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, FinEvent_GetArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, FinEvent_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, FinEvent_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) ListAllocations(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListAllocationsResponse, error) {
	out := new(ListAllocationsResponse)
	err := c.cc.Invoke(ctx, FinEvent_ListAllocations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finEventClient) CreateAllocation(ctx context.Context, in *Allocation, opts ...grpc.CallOption) (*Allocation, error) {
	out := new(Allocation)
	err := c.cc.Invoke(ctx, FinEvent_CreateAllocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinEventServer is the server API for FinEvent service.
// All implementations must embed UnimplementedFinEventServer
// for forward compatibility
type FinEventServer interface {
	// --
	ListTransfers(context.Context, *ListRequest) (*ListTransfersResponse, error)
	GetTransfer(context.Context, *GetRequest) (*Transfer, error)
	CreateTransfer(context.Context, *Transfer) (*Transfer, error)
	BatchInsertTransfers(context.Context, *BatchInsertTransfersRequest) (*emptypb.Empty, error)
	UpdateTransfer(context.Context, *Transfer) (*Transfer, error)
	AggregateTransfers(context.Context, *AggregateRequest) (*TransfersAggregate, error)
	// --
	ListAccruals(context.Context, *ListRequest) (*ListAccrualsResponse, error)
	GetAccrual(context.Context, *GetRequest) (*Accrual, error)
	CreateAccrual(context.Context, *Accrual) (*Accrual, error)
	UpdateAccrual(context.Context, *Accrual) (*Accrual, error)
	AggregateAccruals(context.Context, *AggregateRequest) (*AccrualsAggregate, error)
	BatchInsertAccruals(context.Context, *BatchInsertAccrualsRequest) (*emptypb.Empty, error)
	// --
	ListProducts(context.Context, *ListRequest) (*ListProductsResponse, error)
	ListPositions(context.Context, *ListRequest) (*ListPositionsResponse, error)
	UpdatePosition(context.Context, *Position) (*Position, error)
	BatchInsertPostions(context.Context, *BatchInsertPositionsRequest) (*emptypb.Empty, error)
	// --
	ListArticles(context.Context, *emptypb.Empty) (*ListArticlesResponse, error)
	GetArticle(context.Context, *GetRequest) (*Article, error)
	CreateArticle(context.Context, *Article) (*Article, error)
	UpdateArticle(context.Context, *Article) (*Article, error)
	// --
	ListAllocations(context.Context, *ListRequest) (*ListAllocationsResponse, error)
	CreateAllocation(context.Context, *Allocation) (*Allocation, error)
	mustEmbedUnimplementedFinEventServer()
}

// UnimplementedFinEventServer must be embedded to have forward compatible implementations.
type UnimplementedFinEventServer struct {
}

func (UnimplementedFinEventServer) ListTransfers(context.Context, *ListRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (UnimplementedFinEventServer) GetTransfer(context.Context, *GetRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfer not implemented")
}
func (UnimplementedFinEventServer) CreateTransfer(context.Context, *Transfer) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}
func (UnimplementedFinEventServer) BatchInsertTransfers(context.Context, *BatchInsertTransfersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsertTransfers not implemented")
}
func (UnimplementedFinEventServer) UpdateTransfer(context.Context, *Transfer) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransfer not implemented")
}
func (UnimplementedFinEventServer) AggregateTransfers(context.Context, *AggregateRequest) (*TransfersAggregate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateTransfers not implemented")
}
func (UnimplementedFinEventServer) ListAccruals(context.Context, *ListRequest) (*ListAccrualsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccruals not implemented")
}
func (UnimplementedFinEventServer) GetAccrual(context.Context, *GetRequest) (*Accrual, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccrual not implemented")
}
func (UnimplementedFinEventServer) CreateAccrual(context.Context, *Accrual) (*Accrual, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccrual not implemented")
}
func (UnimplementedFinEventServer) UpdateAccrual(context.Context, *Accrual) (*Accrual, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccrual not implemented")
}
func (UnimplementedFinEventServer) AggregateAccruals(context.Context, *AggregateRequest) (*AccrualsAggregate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateAccruals not implemented")
}
func (UnimplementedFinEventServer) BatchInsertAccruals(context.Context, *BatchInsertAccrualsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsertAccruals not implemented")
}
func (UnimplementedFinEventServer) ListProducts(context.Context, *ListRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedFinEventServer) ListPositions(context.Context, *ListRequest) (*ListPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPositions not implemented")
}
func (UnimplementedFinEventServer) UpdatePosition(context.Context, *Position) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedFinEventServer) BatchInsertPostions(context.Context, *BatchInsertPositionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsertPostions not implemented")
}
func (UnimplementedFinEventServer) ListArticles(context.Context, *emptypb.Empty) (*ListArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedFinEventServer) GetArticle(context.Context, *GetRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedFinEventServer) CreateArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedFinEventServer) UpdateArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedFinEventServer) ListAllocations(context.Context, *ListRequest) (*ListAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllocations not implemented")
}
func (UnimplementedFinEventServer) CreateAllocation(context.Context, *Allocation) (*Allocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllocation not implemented")
}
func (UnimplementedFinEventServer) mustEmbedUnimplementedFinEventServer() {}

// UnsafeFinEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinEventServer will
// result in compilation errors.
type UnsafeFinEventServer interface {
	mustEmbedUnimplementedFinEventServer()
}

func RegisterFinEventServer(s grpc.ServiceRegistrar, srv FinEventServer) {
	s.RegisterService(&FinEvent_ServiceDesc, srv)
}

func _FinEvent_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_ListTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).ListTransfers(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_GetTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).GetTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_GetTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).GetTransfer(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_CreateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).CreateTransfer(ctx, req.(*Transfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_BatchInsertTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInsertTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).BatchInsertTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_BatchInsertTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).BatchInsertTransfers(ctx, req.(*BatchInsertTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_UpdateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).UpdateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_UpdateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).UpdateTransfer(ctx, req.(*Transfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_AggregateTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).AggregateTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_AggregateTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).AggregateTransfers(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_ListAccruals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).ListAccruals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_ListAccruals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).ListAccruals(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_GetAccrual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).GetAccrual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_GetAccrual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).GetAccrual(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_CreateAccrual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Accrual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).CreateAccrual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_CreateAccrual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).CreateAccrual(ctx, req.(*Accrual))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_UpdateAccrual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Accrual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).UpdateAccrual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_UpdateAccrual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).UpdateAccrual(ctx, req.(*Accrual))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_AggregateAccruals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).AggregateAccruals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_AggregateAccruals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).AggregateAccruals(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_BatchInsertAccruals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInsertAccrualsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).BatchInsertAccruals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_BatchInsertAccruals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).BatchInsertAccruals(ctx, req.(*BatchInsertAccrualsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).ListProducts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_ListPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).ListPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_ListPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).ListPositions(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Position)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_UpdatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).UpdatePosition(ctx, req.(*Position))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_BatchInsertPostions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInsertPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).BatchInsertPostions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_BatchInsertPostions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).BatchInsertPostions(ctx, req.(*BatchInsertPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_ListArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).ListArticles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).GetArticle(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).CreateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).UpdateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_ListAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).ListAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_ListAllocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).ListAllocations(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinEvent_CreateAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Allocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinEventServer).CreateAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinEvent_CreateAllocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinEventServer).CreateAllocation(ctx, req.(*Allocation))
	}
	return interceptor(ctx, in, info, handler)
}

// FinEvent_ServiceDesc is the grpc.ServiceDesc for FinEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FinEvent",
	HandlerType: (*FinEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTransfers",
			Handler:    _FinEvent_ListTransfers_Handler,
		},
		{
			MethodName: "GetTransfer",
			Handler:    _FinEvent_GetTransfer_Handler,
		},
		{
			MethodName: "CreateTransfer",
			Handler:    _FinEvent_CreateTransfer_Handler,
		},
		{
			MethodName: "BatchInsertTransfers",
			Handler:    _FinEvent_BatchInsertTransfers_Handler,
		},
		{
			MethodName: "UpdateTransfer",
			Handler:    _FinEvent_UpdateTransfer_Handler,
		},
		{
			MethodName: "AggregateTransfers",
			Handler:    _FinEvent_AggregateTransfers_Handler,
		},
		{
			MethodName: "ListAccruals",
			Handler:    _FinEvent_ListAccruals_Handler,
		},
		{
			MethodName: "GetAccrual",
			Handler:    _FinEvent_GetAccrual_Handler,
		},
		{
			MethodName: "CreateAccrual",
			Handler:    _FinEvent_CreateAccrual_Handler,
		},
		{
			MethodName: "UpdateAccrual",
			Handler:    _FinEvent_UpdateAccrual_Handler,
		},
		{
			MethodName: "AggregateAccruals",
			Handler:    _FinEvent_AggregateAccruals_Handler,
		},
		{
			MethodName: "BatchInsertAccruals",
			Handler:    _FinEvent_BatchInsertAccruals_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _FinEvent_ListProducts_Handler,
		},
		{
			MethodName: "ListPositions",
			Handler:    _FinEvent_ListPositions_Handler,
		},
		{
			MethodName: "UpdatePosition",
			Handler:    _FinEvent_UpdatePosition_Handler,
		},
		{
			MethodName: "BatchInsertPostions",
			Handler:    _FinEvent_BatchInsertPostions_Handler,
		},
		{
			MethodName: "ListArticles",
			Handler:    _FinEvent_ListArticles_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _FinEvent_GetArticle_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _FinEvent_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _FinEvent_UpdateArticle_Handler,
		},
		{
			MethodName: "ListAllocations",
			Handler:    _FinEvent_ListAllocations_Handler,
		},
		{
			MethodName: "CreateAllocation",
			Handler:    _FinEvent_CreateAllocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fin_event.proto",
}
