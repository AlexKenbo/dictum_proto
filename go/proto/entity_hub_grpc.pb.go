// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/entity_hub.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EntityHub_ListEntities_FullMethodName         = "/EntityHub/ListEntities"
	EntityHub_GetEntity_FullMethodName            = "/EntityHub/GetEntity"
	EntityHub_CreateEntity_FullMethodName         = "/EntityHub/CreateEntity"
	EntityHub_BatchInsertEntities_FullMethodName  = "/EntityHub/BatchInsertEntities"
	EntityHub_UpdateEntity_FullMethodName         = "/EntityHub/UpdateEntity"
	EntityHub_AggregateEntity_FullMethodName      = "/EntityHub/AggregateEntity"
	EntityHub_ListEmployees_FullMethodName        = "/EntityHub/ListEmployees"
	EntityHub_CreateEmployee_FullMethodName       = "/EntityHub/CreateEmployee"
	EntityHub_ListCountries_FullMethodName        = "/EntityHub/ListCountries"
	EntityHub_ListAccounts_FullMethodName         = "/EntityHub/ListAccounts"
	EntityHub_ListAccountDetails_FullMethodName   = "/EntityHub/ListAccountDetails"
	EntityHub_GetAccount_FullMethodName           = "/EntityHub/GetAccount"
	EntityHub_GetAccountDetail_FullMethodName     = "/EntityHub/GetAccountDetail"
	EntityHub_CreateAccount_FullMethodName        = "/EntityHub/CreateAccount"
	EntityHub_CreateAccountDetails_FullMethodName = "/EntityHub/CreateAccountDetails"
	EntityHub_BatchInsertAccounts_FullMethodName  = "/EntityHub/BatchInsertAccounts"
	EntityHub_UpdateAccount_FullMethodName        = "/EntityHub/UpdateAccount"
	EntityHub_UpdateAccountDetails_FullMethodName = "/EntityHub/UpdateAccountDetails"
	EntityHub_DeleteAccount_FullMethodName        = "/EntityHub/DeleteAccount"
	EntityHub_ListCurrencies_FullMethodName       = "/EntityHub/ListCurrencies"
	EntityHub_ListFis_FullMethodName              = "/EntityHub/ListFis"
)

// EntityHubClient is the client API for EntityHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityHubClient interface {
	// --
	ListEntities(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	GetEntity(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Entity, error)
	CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	BatchInsertEntities(ctx context.Context, in *BatchInsertEntitiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	AggregateEntity(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*EntityAggregate, error)
	// --
	ListEmployees(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListEmployeesResponse, error)
	CreateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error)
	// --
	ListCountries(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error)
	// --
	ListAccounts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	ListAccountDetails(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListAccountDetailsResponse, error)
	GetAccount(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Account, error)
	GetAccountDetail(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*AccountDetail, error)
	CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	CreateAccountDetails(ctx context.Context, in *AccountDetail, opts ...grpc.CallOption) (*AccountDetail, error)
	BatchInsertAccounts(ctx context.Context, in *BatchInsertAccountsRequest, opts ...grpc.CallOption) (*BatchInsertAccountsResponse, error)
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	UpdateAccountDetails(ctx context.Context, in *AccountDetail, opts ...grpc.CallOption) (*AccountDetail, error)
	DeleteAccount(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --
	ListCurrencies(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error)
	// --
	ListFis(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListFisResponse, error)
}

type entityHubClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityHubClient(cc grpc.ClientConnInterface) EntityHubClient {
	return &entityHubClient{cc}
}

func (c *entityHubClient) ListEntities(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, EntityHub_ListEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) GetEntity(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, EntityHub_GetEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, EntityHub_CreateEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) BatchInsertEntities(ctx context.Context, in *BatchInsertEntitiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EntityHub_BatchInsertEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) UpdateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, EntityHub_UpdateEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) AggregateEntity(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*EntityAggregate, error) {
	out := new(EntityAggregate)
	err := c.cc.Invoke(ctx, EntityHub_AggregateEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) ListEmployees(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListEmployeesResponse, error) {
	out := new(ListEmployeesResponse)
	err := c.cc.Invoke(ctx, EntityHub_ListEmployees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) CreateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, EntityHub_CreateEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) ListCountries(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error) {
	out := new(ListCountriesResponse)
	err := c.cc.Invoke(ctx, EntityHub_ListCountries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) ListAccounts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, EntityHub_ListAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) ListAccountDetails(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListAccountDetailsResponse, error) {
	out := new(ListAccountDetailsResponse)
	err := c.cc.Invoke(ctx, EntityHub_ListAccountDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) GetAccount(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, EntityHub_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) GetAccountDetail(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*AccountDetail, error) {
	out := new(AccountDetail)
	err := c.cc.Invoke(ctx, EntityHub_GetAccountDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, EntityHub_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) CreateAccountDetails(ctx context.Context, in *AccountDetail, opts ...grpc.CallOption) (*AccountDetail, error) {
	out := new(AccountDetail)
	err := c.cc.Invoke(ctx, EntityHub_CreateAccountDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) BatchInsertAccounts(ctx context.Context, in *BatchInsertAccountsRequest, opts ...grpc.CallOption) (*BatchInsertAccountsResponse, error) {
	out := new(BatchInsertAccountsResponse)
	err := c.cc.Invoke(ctx, EntityHub_BatchInsertAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, EntityHub_UpdateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) UpdateAccountDetails(ctx context.Context, in *AccountDetail, opts ...grpc.CallOption) (*AccountDetail, error) {
	out := new(AccountDetail)
	err := c.cc.Invoke(ctx, EntityHub_UpdateAccountDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) DeleteAccount(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EntityHub_DeleteAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) ListCurrencies(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error) {
	out := new(ListCurrenciesResponse)
	err := c.cc.Invoke(ctx, EntityHub_ListCurrencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHubClient) ListFis(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListFisResponse, error) {
	out := new(ListFisResponse)
	err := c.cc.Invoke(ctx, EntityHub_ListFis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityHubServer is the server API for EntityHub service.
// All implementations must embed UnimplementedEntityHubServer
// for forward compatibility
type EntityHubServer interface {
	// --
	ListEntities(context.Context, *ListRequest) (*ListEntitiesResponse, error)
	GetEntity(context.Context, *GetRequest) (*Entity, error)
	CreateEntity(context.Context, *Entity) (*Entity, error)
	BatchInsertEntities(context.Context, *BatchInsertEntitiesRequest) (*emptypb.Empty, error)
	UpdateEntity(context.Context, *Entity) (*Entity, error)
	AggregateEntity(context.Context, *GetRequest) (*EntityAggregate, error)
	// --
	ListEmployees(context.Context, *ListRequest) (*ListEmployeesResponse, error)
	CreateEmployee(context.Context, *Employee) (*Employee, error)
	// --
	ListCountries(context.Context, *ListRequest) (*ListCountriesResponse, error)
	// --
	ListAccounts(context.Context, *ListRequest) (*ListAccountsResponse, error)
	ListAccountDetails(context.Context, *ListRequest) (*ListAccountDetailsResponse, error)
	GetAccount(context.Context, *GetRequest) (*Account, error)
	GetAccountDetail(context.Context, *GetRequest) (*AccountDetail, error)
	CreateAccount(context.Context, *Account) (*Account, error)
	CreateAccountDetails(context.Context, *AccountDetail) (*AccountDetail, error)
	BatchInsertAccounts(context.Context, *BatchInsertAccountsRequest) (*BatchInsertAccountsResponse, error)
	UpdateAccount(context.Context, *Account) (*Account, error)
	UpdateAccountDetails(context.Context, *AccountDetail) (*AccountDetail, error)
	DeleteAccount(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	// --
	ListCurrencies(context.Context, *ListRequest) (*ListCurrenciesResponse, error)
	// --
	ListFis(context.Context, *ListRequest) (*ListFisResponse, error)
	mustEmbedUnimplementedEntityHubServer()
}

// UnimplementedEntityHubServer must be embedded to have forward compatible implementations.
type UnimplementedEntityHubServer struct {
}

func (UnimplementedEntityHubServer) ListEntities(context.Context, *ListRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedEntityHubServer) GetEntity(context.Context, *GetRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedEntityHubServer) CreateEntity(context.Context, *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedEntityHubServer) BatchInsertEntities(context.Context, *BatchInsertEntitiesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsertEntities not implemented")
}
func (UnimplementedEntityHubServer) UpdateEntity(context.Context, *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedEntityHubServer) AggregateEntity(context.Context, *GetRequest) (*EntityAggregate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateEntity not implemented")
}
func (UnimplementedEntityHubServer) ListEmployees(context.Context, *ListRequest) (*ListEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployees not implemented")
}
func (UnimplementedEntityHubServer) CreateEmployee(context.Context, *Employee) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedEntityHubServer) ListCountries(context.Context, *ListRequest) (*ListCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (UnimplementedEntityHubServer) ListAccounts(context.Context, *ListRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedEntityHubServer) ListAccountDetails(context.Context, *ListRequest) (*ListAccountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountDetails not implemented")
}
func (UnimplementedEntityHubServer) GetAccount(context.Context, *GetRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedEntityHubServer) GetAccountDetail(context.Context, *GetRequest) (*AccountDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountDetail not implemented")
}
func (UnimplementedEntityHubServer) CreateAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedEntityHubServer) CreateAccountDetails(context.Context, *AccountDetail) (*AccountDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountDetails not implemented")
}
func (UnimplementedEntityHubServer) BatchInsertAccounts(context.Context, *BatchInsertAccountsRequest) (*BatchInsertAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsertAccounts not implemented")
}
func (UnimplementedEntityHubServer) UpdateAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedEntityHubServer) UpdateAccountDetails(context.Context, *AccountDetail) (*AccountDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountDetails not implemented")
}
func (UnimplementedEntityHubServer) DeleteAccount(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedEntityHubServer) ListCurrencies(context.Context, *ListRequest) (*ListCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrencies not implemented")
}
func (UnimplementedEntityHubServer) ListFis(context.Context, *ListRequest) (*ListFisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFis not implemented")
}
func (UnimplementedEntityHubServer) mustEmbedUnimplementedEntityHubServer() {}

// UnsafeEntityHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityHubServer will
// result in compilation errors.
type UnsafeEntityHubServer interface {
	mustEmbedUnimplementedEntityHubServer()
}

func RegisterEntityHubServer(s grpc.ServiceRegistrar, srv EntityHubServer) {
	s.RegisterService(&EntityHub_ServiceDesc, srv)
}

func _EntityHub_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_ListEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).ListEntities(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).GetEntity(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).CreateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_BatchInsertEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInsertEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).BatchInsertEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_BatchInsertEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).BatchInsertEntities(ctx, req.(*BatchInsertEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).UpdateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_AggregateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).AggregateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_AggregateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).AggregateEntity(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_ListEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).ListEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_ListEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).ListEmployees(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_CreateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).CreateEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_ListCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).ListCountries(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).ListAccounts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_ListAccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).ListAccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_ListAccountDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).ListAccountDetails(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).GetAccount(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_GetAccountDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).GetAccountDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_GetAccountDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).GetAccountDetail(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).CreateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_CreateAccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).CreateAccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_CreateAccountDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).CreateAccountDetails(ctx, req.(*AccountDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_BatchInsertAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInsertAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).BatchInsertAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_BatchInsertAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).BatchInsertAccounts(ctx, req.(*BatchInsertAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_UpdateAccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).UpdateAccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_UpdateAccountDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).UpdateAccountDetails(ctx, req.(*AccountDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).DeleteAccount(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_ListCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).ListCurrencies(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHub_ListFis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHubServer).ListFis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityHub_ListFis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHubServer).ListFis(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityHub_ServiceDesc is the grpc.ServiceDesc for EntityHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EntityHub",
	HandlerType: (*EntityHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEntities",
			Handler:    _EntityHub_ListEntities_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _EntityHub_GetEntity_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _EntityHub_CreateEntity_Handler,
		},
		{
			MethodName: "BatchInsertEntities",
			Handler:    _EntityHub_BatchInsertEntities_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _EntityHub_UpdateEntity_Handler,
		},
		{
			MethodName: "AggregateEntity",
			Handler:    _EntityHub_AggregateEntity_Handler,
		},
		{
			MethodName: "ListEmployees",
			Handler:    _EntityHub_ListEmployees_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _EntityHub_CreateEmployee_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _EntityHub_ListCountries_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _EntityHub_ListAccounts_Handler,
		},
		{
			MethodName: "ListAccountDetails",
			Handler:    _EntityHub_ListAccountDetails_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _EntityHub_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountDetail",
			Handler:    _EntityHub_GetAccountDetail_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _EntityHub_CreateAccount_Handler,
		},
		{
			MethodName: "CreateAccountDetails",
			Handler:    _EntityHub_CreateAccountDetails_Handler,
		},
		{
			MethodName: "BatchInsertAccounts",
			Handler:    _EntityHub_BatchInsertAccounts_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _EntityHub_UpdateAccount_Handler,
		},
		{
			MethodName: "UpdateAccountDetails",
			Handler:    _EntityHub_UpdateAccountDetails_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _EntityHub_DeleteAccount_Handler,
		},
		{
			MethodName: "ListCurrencies",
			Handler:    _EntityHub_ListCurrencies_Handler,
		},
		{
			MethodName: "ListFis",
			Handler:    _EntityHub_ListFis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/entity_hub.proto",
}
